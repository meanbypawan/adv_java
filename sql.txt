Database [MySQL]
  SQL :-
  1. DDL (Data Definition Language)
     create, alter, truncate
  2. DML (Data Manipulation Language)
     insert, delete, update
  3. DRL (Data Reteriving Language)
     select
  4. TCL (Transaction Control Language)
     commit , rollback
  5. DCL (Data Control Language)
     grant, revoke
 -------------------------------------------------------------
  Creating Database :-
    create databae database_name
    ex:- create database userdb    
    use empdb;
    Createing table
    create table employee(
      id int primary key auto_increment,
      name varchar(100) not null,
      age int,
      salary int);
    ------------------------------------------------
   
    insert into employee(name,age,salary) values('cheeku',23,120000);
    insert into employee(name,age,salary) values('aayushman',28,78000),('akshat',24,85000),('ayush',22,810000),('hariom',25,550000)
 -----------------------------------------------------------------------
 Java  + MySQL(RDBMS)
 CRUD
 C :- Create/Inserting 
 R :- Reterive/Selecting
 U :- Update
 D :- Delete   
 
 select * from employee; // Complete Select
 Projection in database
 select id,name,salary from employee;
 alias
 select id as ID, name as EMP_NAME, salary as COST from employee
 ---------------------------------------------------------------------
 Filter (where)
 select * from employee where age = 25
 select * from employee where age >=24 and age <=28
 select * from employee where age between 24 and 28
 select * from employee where age = 25 or age = 28 or age = 22
 select * from employee where age in(25,28,22)
 select * from employee where age = null;
 ----------------------------------------------------------
 Wild card character
  % zero or any number of occurance
  ,
   _
 select * from employee where name like 'a%' 
 select * from employee where name like 'a%h'  
 select * from employee where name like '%k_'
 select * from employee where name like '%ee%'
 select * from employee where name like 'V% K%'
 --------------------------------------------------------------
 count(), avg(), sum(), min(), max()
 select count(*) from employee
 select count(age) from employee;
 select max(age) from employee;
select sum(salary) from employee;
---------------------------------------------------
order by
select * from employee order by age
select * from employee order by age desc
select max(age) from employee;
select * from employee where age = (
   select max(age) from employee);
select * from employee
  where age = ( select max(age) from employee 
    where age != (select max(age) from employee)
   ); 
select * from employee where age = ( select max(age) from employee where age < (select max(age) from employee where age !=(select max(age) from employee)));
------------------------------------------------------------------
select * from employee order by salary desc limit 5
select * from employee order by salary desc limit 5,3
--------------------------------------------------------------------------------
Relationship
  1. one to one
  If record of one table is associated with one record of another table is called one to one relation ship
   User hasOne Cart
   Customer hasOne Account
  2. one to many
  If record of one table is associated with multiple record of another table is called one to many
  Category hasMany Product
  City hasMany Employee
   
  3. many to many
    If one record of Table A  is assciated with multiple record of  table B and one record of Table B is associated with
    multiple record of Table A is called Many Many
    If you want to represent many to many relationship then you will have to make a use of third supporting table 
   One Cart hasMany Product
   Same product belongsToMany Cart
   ----------------------------------------------
   create table project(
     id int primary key auto_increment,
     projectName varchar(100),
     clientName varchar(100),
     empId int unique key not null,
     foreign key(empId) references employee(id);
  insert into project(projectName,clientName,empId)
  values('Grow App','Jhonson',5),('Fundraiser','Alexan',7)
-------------------------------------------------------------------
  Country hasMany State
  State hasMany Cities
  City hasMany Employee
  
  create table country(id int primary key auto_increment,
  countryName varchar(100));
  create table state(id int primary key auto_increment,
  stateName varchar(100), countryId int,
  foreign key(countryId) references country(id))
------------------------------------------------------------
insert into country(countryName) values('India'),('Russia'),('Australia') 
 insert into state(stateName,countryId)
 values('MP',1),('UP',1),('MH',1),('GJ',1),('Mosco',2),('Mosco-2',2)
 --------------------------------------------------------
 create table city(
  id int primary key auto_increment,
  cityName varchar(100),
  stateId int,
  foreign key(stateId) references state(id));
 insert into city(cityName,stateId)
 values('Indore',1),('Ujjain',1),('Jabalpur',1),('Agra',2),('Lucknow',2),('Mirzapur',2),('Mumbai',3),('Pune',3),('Ahamdabad',4),('Vadodra',4),('Gandhinagar',4),('Mosco-City',5) 
 -------------------------------------------------
 alter table employee add (
   cityId int,
   foreign key(cityId) references city(id))
 -----------------------------------------------
 employee details avilable in Employee Table
 city details available in City Table
 Where employee and city both are associated with one to many relationship.
 Join :-
   inner join
   left outer
   right outer
   cross 
   self join
 select employee.id,employee.name,city.cityName
 from employee inner join city on employee.cityId = city.id
 
 select employee.id,employee.name,city.cityName,state.stateName,country.countryName
 from employee inner join city on employee.cityId = city.id
 inner join state on state.id = city.stateId
 inner join country on country.id = state.countryId
 
 select employee.id,employee.name,city.cityName
 from employee left outer join city on employee.cityId = city.id
------------------------------------------------------------
select count(*),cityId from employee group by cityId 

select count(*),city.cityName from employee 
inner join city on employee.cityId = city.id
group by city.cityName
---------------------------------------------------------
delete from employee where id = 12

 
We have to connect
  Java Application   with   Database
  JA ------ JDBC ------- Database
 -------------------------------------------
 JDBC (Java Database Connectivity)
 import java.sql.*;
 1. Driver (Interface)
 2. DriverManager
     a. To Load the Driver
     b. To get the connection with database
   DriverManager.getConnection(String dbUrl,String username,String password)
   e.g
   Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/empdb","root","root")
 3. Connection (Interface)     
 4. Statement(Interface)  :- To Execute Non-parameterized SQL
 5. PreparedStatement(Interface) :- To Execute parameterized SQL
 6. CallableStatement(Interface) :- To execute Stored procedure
 7. ResultSet (Interface) :- It is responsible to store the data which is return by the select query.
 8. ResultSetMetaData :- It is used to get information about the ResultSet
 9. SQLException :- To understand the sql related error/Exception     
 
